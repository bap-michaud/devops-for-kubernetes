name: Build and Test - Web App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: [amd64, arm64]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: |
          if grep -q '"lint"' package.json; then
            npm run lint
          else
            echo "No linting script found, skipping..."
          fi

      - name: Run tests
        run: npm run test:coverage

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-web-app-${{ matrix.architecture }}
          path: |
            coverage/
            test-results.xml
          retention-days: 30

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          flags: web-app
          name: web-app-coverage
          fail_ci_if_error: false

      - name: Set up QEMU for multi-arch builds
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-web-app-${{ matrix.architecture }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-web-app-${{ matrix.architecture }}-
            ${{ runner.os }}-buildx-web-app-

      - name: Build Docker image (test)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/${{ matrix.architecture }}
          push: false
          tags: web-app:test-${{ matrix.architecture }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          target: test

      - name: Run container tests
        run: |
          # Test that the container starts correctly
          docker run --rm -d --name web-app-test -p 3000:3000 web-app:test-${{ matrix.architecture }}
          
          # Wait for container to be ready
          timeout 30 bash -c 'until curl -f http://localhost:3000/health; do sleep 1; done'
          
          # Run basic smoke tests
          curl -f http://localhost:3000/ || exit 1
          
          # Cleanup
          docker stop web-app-test

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: web-app:scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'web-app:scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build-summary:
    needs: [build-and-test, security-scan]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Build Summary
        run: |
          echo "## Build Summary - Web App" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Architectures |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|---------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Test | ${{ needs.build-and-test.result }} | amd64, arm64 |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} | amd64 |" >> $GITHUB_STEP_SUMMARY